/**
 * Templates de prompts pour les exercices de logique
 * Story 3.2: Design Exercise Generation Prompts
 */

import {
  PromptTemplate,
  ExerciseGenerationParams,
  AnswerValidationParams,
  GeneratedExercise
} from './types';
import { getAgeGuidelines, getLeniencyLevel } from './age-guidelines';

/**
 * Prompt syst√®me pour la g√©n√©ration d'exercices de logique
 */
const LOGIC_SYSTEM_PROMPT = `Tu es un expert en p√©dagogie de la logique et du raisonnement pour enfants francophones.
Tu g√©n√®res des √©nigmes et d√©fis de logique FASCINANTS qui stimulent la r√©flexion.

R√àGLES STRICTES:
1. Toujours en fran√ßais parfait et adapt√© √† l'√¢ge
2. √ânigmes visuelles, patterns, s√©quences, d√©duction, r√©solution de probl√®mes
3. Pr√©sentation claire avec √©mojis pour visualiser le probl√®me
4. Format de sortie: JSON strict avec les champs: question, answer, hints, type, difficulty, ageRange
5. Les hints guident le raisonnement √©tape par √©tape
6. La r√©ponse doit √™tre claire et unique

TYPES D'EXERCICES DE LOGIQUE:
- Suites logiques (nombres, formes, patterns)
- √ânigmes de d√©duction
- Probl√®mes de logique spatiale
- Casse-t√™tes math√©matiques
- Raisonnement par √©limination

STYLE:
- √ânigmes intrigantes qui donnent envie de r√©soudre
- Pr√©sentation visuelle avec √©mojis
- Contextes amusants (d√©tectives, explorateurs, magiciens)
- Faire sentir l'exercice comme un puzzle captivant`;

/**
 * G√©n√©rer le prompt utilisateur pour un exercice de logique
 */
function generateLogicUserPrompt(params: ExerciseGenerationParams): string {
  const { ageRange, difficulty } = params;
  const guidelines = getAgeGuidelines(ageRange);
  
  let difficultyInstructions = '';
  
  if (difficulty === 'easy') {
    difficultyInstructions = 'FACILE - Pattern simple, d√©duction directe, 1-2 √©tapes';
  } else if (difficulty === 'medium') {
    difficultyInstructions = 'MOYEN - Pattern ou d√©duction n√©cessitant 2-3 √©tapes de raisonnement';
  } else {
    difficultyInstructions = 'DIFFICILE - Raisonnement complexe, plusieurs √©tapes, √©limination';
  }
  
  // Instructions sp√©cifiques par √¢ge
  let ageSpecificInstructions = '';
  
  if (ageRange === '6-8') {
    ageSpecificInstructions = `
NIVEAU 6-8 ANS:
- Patterns visuels simples (r√©p√©titions)
- Suites de nombres simples (+1, +2, -1)
- Cat√©gorisation basique (animaux, couleurs, formes)
- √ânigmes avec 2-3 √©l√©ments maximum
- Utiliser beaucoup d'√©mojis pour visualiser`;
  } else if (ageRange === '9-11') {
    ageSpecificInstructions = `
NIVEAU 9-11 ANS:
- Patterns plus complexes (alternance, multiplication)
- D√©duction logique avec 3-4 indices
- √ânigmes de position et ordre
- Probl√®mes de logique √† 2-3 √©tapes
- Casse-t√™tes avec plusieurs solutions possibles √† √©liminer`;
  } else {
    ageSpecificInstructions = `
NIVEAU 12-14 ANS:
- Patterns abstraits et alg√©briques
- D√©duction avec conditions multiples
- √ânigmes n√©cessitant organisation m√©thodique
- Raisonnement par l'absurde
- Probl√®mes combinatoires simples`;
  }

  return `G√©n√®re UNE √©nigme de logique unique avec ces param√®tres:

TRANCHE D'√ÇGE: ${ageRange} ans
DIFFICULT√â: ${difficultyInstructions}

${ageSpecificInstructions}

GUIDELINES COGNITIVES:
- Niveau cognitif: ${guidelines.cognitiveLevel}
- Capacit√© d'attention: ${guidelines.attention}

EXEMPLES DE TYPES D'√âNIGMES:
- Suite logique: "üîµ üî¥ üîµ üî¥ üîµ ___ ?"
- D√©duction: "Si tous les A sont B, et C est un A, alors..."
- Pattern num√©rique: "2, 4, 8, 16, ___ ?"
- √ânigme positionnelle: "Marc est plus grand que L√©a. L√©a est plus grande que Tom. Qui est le plus petit?"

IMPORTANT:
- Rends l'√©nigme intrigante et captivante
- Utilise des √©mojis pour illustrer (üî¥üîµüü°üü¢‚≠êüåô‚òÄÔ∏èüê±üê∂ü¶Å etc.)
- La solution doit √™tre logiquement d√©ductible
- Fournis 3 hints qui guident le raisonnement

R√©ponds UNIQUEMENT avec un JSON valide dans ce format exact:
{
  "question": "...",
  "answer": "...",
  "hints": ["hint1", "hint2", "hint3"],
  "type": "logic",
  "difficulty": "${difficulty}",
  "ageRange": "${ageRange}"
}`;
}

/**
 * G√©n√©rer le prompt de validation pour une r√©ponse de logique
 */
function generateLogicValidationPrompt(params: AnswerValidationParams): string {
  const { question, correctAnswer, childAnswer, ageRange } = params;
  const leniency = getLeniencyLevel(ageRange);
  
  return `Tu es un correcteur bienveillant d'exercices de logique pour enfants.

√âNIGME DE LOGIQUE:
${question}

R√©ponse attendue: ${correctAnswer}
R√©ponse de l'enfant: ${childAnswer}
√Çge de l'enfant: ${ageRange} ans

NIVEAU DE TOL√âRANCE POUR CET √ÇGE:
${leniency}

INSTRUCTIONS DE VALIDATION POUR LA LOGIQUE:
1. V√©rifie si le raisonnement de l'enfant est correct
2. Accepte les r√©ponses √©quivalentes:
   - Formulations diff√©rentes de la m√™me r√©ponse
   - Synonymes (rouge/üî¥, √©toile/‚≠ê)
   - Diff√©rents formats num√©riques
3. Pour les patterns, accepte la r√©ponse si elle suit la logique
4. Tol√®re les erreurs d'orthographe selon l'√¢ge
5. Si l'enfant a compris la logique mais s'est tromp√© sur un d√©tail, sois tol√©rant
6. Pour les 6-8 ans: accepte toute r√©ponse montrant compr√©hension du concept
7. Pour les 9-11 ans: exige justesse logique mais accepte formulations vari√©es
8. Pour les 12-14 ans: exige pr√©cision mais reste bienveillant

FEEDBACK:
- Si correct: F√©licite l'excellente logique et le raisonnement
- Si incorrect: Encourage √† r√©fl√©chir autrement et donne un indice

R√©ponds UNIQUEMENT avec un JSON valide:
{
  "isCorrect": true ou false,
  "feedback": "Message en fran√ßais pour l'enfant",
  "leniencyApplied": true ou false
}`;
}

/**
 * Exemples d'exercices de logique
 */
const LOGIC_EXAMPLES: GeneratedExercise[] = [
  {
    question: "üîµ üî¥ üîµ üî¥ üîµ ___\n\nQuelle couleur vient ensuite dans ce motif?",
    answer: "rouge",
    hints: [
      "Observe l'ordre des couleurs",
      "Les couleurs alternent: bleu, rouge, bleu, rouge...",
      "Apr√®s bleu vient..."
    ],
    type: 'logic',
    difficulty: 'easy',
    ageRange: '6-8'
  },
  {
    question: "üê± Trois amis ont des animaux diff√©rents: un chat, un chien et un poisson.\n- Julie n'a pas de chat\n- Marc a un animal qui nage\n- Sophie adore les f√©lins\n\nQui a le chien?",
    answer: "Julie",
    hints: [
      "Marc a le poisson (il nage)",
      "Sophie a le chat (c'est un f√©lin)",
      "Il reste donc..."
    ],
    type: 'logic',
    difficulty: 'medium',
    ageRange: '9-11'
  },
  {
    question: "üßÆ Dans une suite logique:\n2, 6, 12, 20, 30, __\n\nQuel nombre compl√®te la suite?",
    answer: "42",
    hints: [
      "Regarde les diff√©rences entre les nombres",
      "Les diff√©rences sont: +4, +6, +8, +10... La suite des diff√©rences augmente de 2 √† chaque fois",
      "Donc apr√®s +10, on ajoute +12 √† 30"
    ],
    type: 'logic',
    difficulty: 'hard',
    ageRange: '12-14'
  }
];

/**
 * Template complet pour les exercices de logique
 */
export const logicPromptTemplate: PromptTemplate = {
  type: 'logic',
  systemPrompt: LOGIC_SYSTEM_PROMPT,
  userPromptTemplate: generateLogicUserPrompt,
  validationPromptTemplate: generateLogicValidationPrompt,
  examples: LOGIC_EXAMPLES
};
