// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_PRISMA_MIGRATION")
}

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

model User {
  id            String         @id
  name          String
  email         String
  emailVerified Boolean        @default(false)
  image         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]
  children      ChildProfile[]
  parentUser    ParentUser?

  @@unique([email])
  @@map("User")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

// ========================================
// KidGuard Models
// ========================================

enum DifficultyLevel {
  EASY
  MEDIUM
  HARD
}

enum ExerciseType {
  MATH
  READING
  LOGIC
  VOCABULARY
}

model ChildProfile {
  id                    String          @id @default(uuid())
  parentId              String
  name                  String
  age                   Int             // 6-14
  avatar                String?
  difficultyLevel       DifficultyLevel @default(MEDIUM)
  exerciseTypes         ExerciseType[]  @default([MATH, READING, LOGIC, VOCABULARY])
  timeRewardMinutes     Int             @default(15) // 5-60
  blockedAppCategories  String[]        @default([])
  blockedAppsToken      String?

  // Gamification
  totalPoints           Int             @default(0)
  totalStars            Int             @default(0)
  currentStreak         Int             @default(0)

  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt

  // Relations
  parent                User            @relation(fields: [parentId], references: [id], onDelete: Cascade)

  @@index([parentId])
  @@index([parentId, createdAt])
  @@map("child_profiles")
}

model ParentUser {
  id                    String          @id @default(uuid())
  userId                String          @unique
  pinHash               String
  locale                String          @default("fr")
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt

  user                  User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("parent_users")
}
