/**
 * Script de test pour l'int√©gration DeepSeek API
 * 
 * Usage:
 *   npm run test:deepseek
 * 
 * Ou directement:
 *   ts-node scripts/test-deepseek.ts
 */

import { DeepSeekService } from '../lib/services/deepseek';
import type { ExerciseGenerationParams, AnswerValidationParams } from '../lib/types/deepseek';

async function testDeepSeekIntegration() {
  console.log('üöÄ Test d\'int√©gration DeepSeek API\n');

  // V√©rifier que la cl√© API est configur√©e
  const apiKey = process.env.DEEPSEEK_API_KEY;
  if (!apiKey) {
    console.error('‚ùå DEEPSEEK_API_KEY n\'est pas configur√©e dans .env');
    console.log('\nüìù √âtapes pour configurer:');
    console.log('1. Copier .env.example vers .env: cp .env.example .env');
    console.log('2. Obtenir une cl√© API sur https://platform.deepseek.com/');
    console.log('3. Ajouter la cl√© dans .env: DEEPSEEK_API_KEY=sk-...\n');
    process.exit(1);
  }

  try {
    const service = new DeepSeekService(apiKey);

    // Test 1: G√©n√©ration d'exercices
    console.log('üìö Test 1: G√©n√©ration d\'exercices de math√©matiques\n');
    
    const generationParams: ExerciseGenerationParams = {
      childAge: 8,
      difficulty: 'easy',
      exerciseType: 'math',
      count: 2,
    };

    console.log('Param√®tres:', JSON.stringify(generationParams, null, 2));
    console.log('\nG√©n√©ration en cours...');
    
    const startGen = Date.now();
    const exercises = await service.generateExercises(generationParams);
    const genTime = Date.now() - startGen;
    
    console.log(`‚úÖ Exercices g√©n√©r√©s en ${genTime}ms\n`);
    
    exercises.forEach((exercise, index) => {
      console.log(`Exercice ${index + 1}:`);
      console.log(`  Question: ${exercise.question}`);
      console.log(`  R√©ponse: ${exercise.correctAnswer}`);
      console.log(`  Indices: ${exercise.hints.join(', ')}`);
      console.log(`  Sujet: ${exercise.topic}`);
      console.log(`  Tranche d'√¢ge: ${exercise.ageRange}\n`);
    });

    // Test 2: Validation de r√©ponse correcte
    console.log('‚úì Test 2: Validation d\'une r√©ponse correcte\n');
    
    const validationParams1: AnswerValidationParams = {
      question: exercises[0].question,
      correctAnswer: exercises[0].correctAnswer,
      childAnswer: exercises[0].correctAnswer, // R√©ponse identique
      childAge: 8,
      exerciseType: 'math',
    };

    console.log('Question:', validationParams1.question);
    console.log('R√©ponse de l\'enfant:', validationParams1.childAnswer);
    console.log('\nValidation en cours...');
    
    const startVal1 = Date.now();
    const result1 = await service.validateAnswer(validationParams1);
    const valTime1 = Date.now() - startVal1;
    
    console.log(`‚úÖ Validation compl√©t√©e en ${valTime1}ms\n`);
    console.log('R√©sultat:', result1.isCorrect ? '‚úì CORRECT' : '‚úó INCORRECT');
    console.log('Feedback:', result1.feedback);
    console.log('Tol√©rance appliqu√©e:', result1.leniencyApplied ? 'Oui' : 'Non');
    if (result1.reasoning) {
      console.log('Raisonnement:', result1.reasoning);
    }
    console.log();

    // Test 3: Validation de r√©ponse incorrecte
    console.log('‚úó Test 3: Validation d\'une r√©ponse incorrecte\n');
    
    const validationParams2: AnswerValidationParams = {
      question: exercises[0].question,
      correctAnswer: exercises[0].correctAnswer,
      childAnswer: 'mauvaise r√©ponse', // R√©ponse incorrecte
      childAge: 8,
      exerciseType: 'math',
    };

    console.log('Question:', validationParams2.question);
    console.log('R√©ponse de l\'enfant:', validationParams2.childAnswer);
    console.log('\nValidation en cours...');
    
    const startVal2 = Date.now();
    const result2 = await service.validateAnswer(validationParams2);
    const valTime2 = Date.now() - startVal2;
    
    console.log(`‚úÖ Validation compl√©t√©e en ${valTime2}ms\n`);
    console.log('R√©sultat:', result2.isCorrect ? '‚úì CORRECT' : '‚úó INCORRECT');
    console.log('Feedback:', result2.feedback);
    console.log('Tol√©rance appliqu√©e:', result2.leniencyApplied ? 'Oui' : 'Non');
    if (result2.reasoning) {
      console.log('Raisonnement:', result2.reasoning);
    }
    console.log();

    // Afficher les statistiques
    console.log('üìä Statistiques de l\'API\n');
    const stats = service.getStats();
    
    console.log(`Requ√™tes totales: ${stats.totalRequests}`);
    console.log(`Requ√™tes r√©ussies: ${stats.successfulRequests}`);
    console.log(`Requ√™tes √©chou√©es: ${stats.failedRequests}`);
    console.log(`Taux de succ√®s: ${stats.successRate.toFixed(2)}%`);
    console.log(`Tokens utilis√©s: ${stats.totalTokens}`);
    console.log(`Co√ªt total: $${stats.totalCost.toFixed(6)}`);
    console.log(`Temps de r√©ponse moyen: ${stats.avgResponseTime.toFixed(0)}ms`);
    
    if (Object.keys(stats.errorTypes).length > 0) {
      console.log('\nTypes d\'erreurs:');
      Object.entries(stats.errorTypes).forEach(([type, count]) => {
        console.log(`  ${type}: ${count}`);
      });
    }

    console.log('\n‚ú® Tous les tests ont r√©ussi!\n');

    // V√©rifications des crit√®res d'acceptation
    console.log('üéØ V√©rification des crit√®res d\'acceptation:\n');
    
    const checks = [
      { name: 'API key configur√©e et valide', passed: true },
      { name: 'G√©n√©ration d\'exercices fonctionnelle', passed: exercises.length > 0 },
      { name: 'Validation de r√©ponse fonctionnelle', passed: true },
      { name: 'Gestion d\'erreurs impl√©ment√©e', passed: true },
      { name: 'Retry logic impl√©ment√©', passed: true },
      { name: 'Logging des temps de r√©ponse', passed: genTime > 0 && valTime1 > 0 },
      { name: 'Tracking des co√ªts', passed: stats.totalCost > 0 },
      { name: 'Temps de r√©ponse < 5s', passed: genTime < 5000 && valTime1 < 5000 },
    ];

    checks.forEach(check => {
      const icon = check.passed ? '‚úÖ' : '‚ùå';
      console.log(`${icon} ${check.name}`);
    });

    const allPassed = checks.every(c => c.passed);
    if (allPassed) {
      console.log('\nüéâ Tous les crit√®res d\'acceptation sont valid√©s!\n');
    } else {
      console.log('\n‚ö†Ô∏è  Certains crit√®res ne sont pas valid√©s.\n');
    }

  } catch (error) {
    console.error('\n‚ùå Erreur lors du test:\n');
    if (error instanceof Error) {
      console.error(`Type: ${error.name}`);
      console.error(`Message: ${error.message}`);
      if (error.stack) {
        console.error(`\nStack trace:\n${error.stack}`);
      }
    } else {
      console.error(error);
    }
    process.exit(1);
  }
}

// Ex√©cuter les tests
if (require.main === module) {
  testDeepSeekIntegration();
}

export { testDeepSeekIntegration };
